#pragma once

/* Irrlicht compiled as static or dynamic libs */
#cmakedefine BUILD_SHARED_LIBS

/* Irrlicht intrinsics optimized code */
#cmakedefine CV_ENABLE_INTRINSICS

/* Irrlicht additional optimized code */
#cmakedefine CV_DISABLE_OPTIMIZATION

/* Cocoa API */
#cmakedefine HAVE_COCOA

/* DirectX */
#cmakedefine HAVE_DIRECTX
#cmakedefine HAVE_DIRECTX_NV12
#cmakedefine HAVE_D3D11
#cmakedefine HAVE_D3D10
#cmakedefine HAVE_D3D9

/* Vulkan support */
#cmakedefine HAVE_VULKAN

/* Define to 1 if you have the <inttypes.h> header file. */
#cmakedefine HAVE_INTTYPES_H 1

/* ZLIB codec */
#cmakedefine HAVE_ZLIB

/* IJG JPEG codec */
#cmakedefine HAVE_JPEG

/* libpng/png.h needs to be included */
#cmakedefine HAVE_LIBPNG_PNG_H

/* PNG codec */
#cmakedefine HAVE_PNG

/* AES codec */
#cmakedefine HAVE_AES

/* BZIP2 codec */
#cmakedefine HAVE_BZIP2

/* LZMA codec */
#cmakedefine HAVE_LZMA

/* Posix threads (pthreads) */
#cmakedefine HAVE_PTHREAD

/* parallel_for with pthreads */
#cmakedefine HAVE_PTHREADS_PF

/* Win32 UI */
#cmakedefine HAVE_WIN32UI

/* OpenGL support*/
#cmakedefine HAVE_OPENGL

/* Define if your processor stores words with the most significant byte
   first (like Motorola and SPARC, unlike Intel and VAX). */
#cmakedefine WORDS_BIGENDIAN

/* Irrlicht Defines */
// Included from IrrCompileConfig.h
// Copyright (C) 2002-2012 Nikolaus Gebhardt
// This file is part of the "Irrlicht Engine".
// For conditions of distribution and use, see copyright notice in irrlicht.h

//! Irrlicht SDK Version

//! The defines for different operating system are:
//! _IRR_WINDOWS_ for all irrlicht supported Windows versions
//! _IRR_WINDOWS_API_ for Windows or XBox
//! _IRR_LINUX_PLATFORM_ for Linux (it is defined here if no other os is defined)
//! _IRR_SOLARIS_PLATFORM_ for Solaris
//! _IRR_OSX_PLATFORM_ for Apple systems running OSX
//! _IRR_IOS_PLATFORM_ for Apple devices running iOS
//! _IRR_ANDROID_PLATFORM_ for devices running Android
//! _IRR_POSIX_API_ for Posix compatible systems
//! Note: PLATFORM defines the OS specific layer, API can group several platforms

//! DEVICE is the windowing system used, several PLATFORMs support more than one DEVICE
//! Irrlicht can be compiled with more than one device
//! _IRR_COMPILE_WITH_WINDOWS_DEVICE_ for Windows API based device
//! _IRR_COMPILE_WITH_OSX_DEVICE_ for Cocoa native windowing on OSX
//! _IRR_COMPILE_WITH_X11_DEVICE_ for Linux X11 based device
//! _IRR_COMPILE_WITH_SDL_DEVICE_ for platform independent SDL framework
//! _IRR_COMPILE_WITH_CONSOLE_DEVICE_ for no windowing system, used as a fallback
//! _IRR_COMPILE_WITH_FB_DEVICE_ for framebuffer systems

//! Passing defines to the compiler which have NO in front of the _IRR definename is an alternative
//! way which can be used to disable defines (instead of outcommenting them in this header).
//! So defines can be controlled from Makefiles or Projectfiles which allows building
//! different library versions without having to change the sources.
//! Example: NO_IRR_COMPILE_WITH_X11_ would disable X11

//! Uncomment this line to compile with the SDL device
#cmakedefine _IRR_COMPILE_WITH_SDL_DEVICE_
#cmakedefine NO_IRR_COMPILE_WITH_SDL_DEVICE_

//! Comment this line to compile without the fallback console device.
#cmakedefine NO_IRR_COMPILE_WITH_CONSOLE_DEVICE_

//! Define _IRR_COMPILE_WITH_JOYSTICK_SUPPORT_ if you want joystick events.
#cmakedefine NO_IRR_COMPILE_WITH_JOYSTICK_EVENTS_

//! Maximum number of texture an SMaterial can have, up to 8 are supported by Irrlicht.
#cmakedefine _IRR_MATERIAL_MAX_TEXTURES_

//! Whether to support XML and XML-based formats (irrmesh, collada...)
#cmakedefine NO_IRR_COMPILE_WITH_XML_

//! Add a leak-hunter to Irrlicht which helps finding unreleased reference counted objects.
//! NOTE: This is slow and should only be used for debugging
#cmakedefine _IRR_COMPILE_WITH_LEAK_HUNTER_
#cmakedefine NO_IRR_COMPILE_WITH_LEAK_HUNTER_

//! Enable profiling information in the engine
/** NOTE: The profiler itself always exists and can be used by applications.
This define is about the engine creating profile data
while it runs and enabling it will slow down the engine. */
#cmakedefine _IRR_COMPILE_WITH_PROFILING_
#cmakedefine NO_IRR_COMPILE_WITH_PROFILING_

//! Define _IRR_COMPILE_WITH_DIRECT3D_9_ to compile the Irrlicht engine with DIRECT3D9.
/** If you only want to use the software device or opengl you can disable those defines.
This switch is mostly disabled because people do not get the g++ compiler compile
directX header files, and directX is only available on Windows platforms. If you
are using Dev-Cpp, and want to compile this using a DX dev pack, you can define
_IRR_COMPILE_WITH_DX9_DEV_PACK_. So you simply need to add something like this
to the compiler settings: -DIRR_COMPILE_WITH_DX9_DEV_PACK
and this to the linker settings: -ld3dx9
*/

//! Define _IRR_COMPILE_WITH_DIRECTINPUT_JOYSTICK_ if you want to use DirectInput for joystick handling.
/** This only applies to Windows devices, currently only supported under Win32 device.
If not defined, Windows Multimedia library is used, which offers also broad support for joystick devices. */
#cmakedefine NO_IRR_COMPILE_WITH_DIRECTINPUT_JOYSTICK_

//! enabled Direct3D 9
#cmakedefine NO_IRR_COMPILE_WITH_DIRECT3D_9_


//! Define _IRR_COMPILE_WITH_OPENGL_ to compile the Irrlicht engine with OpenGL.
/** If you do not wish the engine to be compiled with OpenGL, comment this
define out. */
#cmakedefine NO_IRR_COMPILE_WITH_OPENGL_

//! Define _IRR_COMPILE_WITH_OGLES1_ to compile the Irrlicht engine with OpenGL ES 1.1.
/** If you do not wish the engine to be compiled with OpenGL ES 1.1, comment this
define out.
Depending on platform you may have to enable _IRR_OGLES1_USE_KHRONOS_API_HEADERS_ as well when using it.
*/
#cmakedefine _IRR_COMPILE_WITH_OGLES1_
#cmakedefine NO_IRR_COMPILE_WITH_OGLES1_

//! Define _IRR_COMPILE_WITH_OGLES2_ to compile the Irrlicht engine with OpenGL ES 2.0.
/** If you do not wish the engine to be compiled with OpenGL ES 2.0, comment this
define out. */
#cmakedefine NO_IRR_COMPILE_WITH_OGLES2_

//! Define _IRR_COMPILE_WITH_WEBGL1_ to compile Irrlicht engine with a WebGL friendly
//! subset of the OpenGL ES 2.0 driver.
#cmakedefine NO_IRR_COMPILE_WITH_WEBGL1_


//! Define _IRR_COMPILE_WITH_SOFTWARE_ to compile the Irrlicht engine with software driver
/** If you do not need the software driver, or want to use Burning's Video instead,
comment this define out */
#cmakedefine NO_IRR_COMPILE_WITH_SOFTWARE_

//! Define _IRR_COMPILE_WITH_BURNINGSVIDEO_ to compile the Irrlicht engine with Burning's video driver
/** If you do not need this software driver, you can comment this define out. */
#cmakedefine NO_IRR_COMPILE_WITH_BURNINGSVIDEO_

//! Define _IRR_COMPILE_WITH_X11_ to compile the Irrlicht engine with X11 support.
/** If you do not wish the engine to be compiled with X11, comment this
define out. */
// Only used in LinuxDevice.
#cmakedefine NO_IRR_COMPILE_WITH_X11_

//! On some Linux systems the XF86 vidmode extension, X11 RandR, or XInput2 are missing.
//! Use these defines to add/remove support for those dependencies as needed.
//! XInput2 (library called Xi) is currently only used to support touch-input.
#cmakedefine _IRR_LINUX_X11_RANDR_
#cmakedefine _IRR_LINUX_X11_XINPUT2_
#cmakedefine NO_IRR_LINUX_X11_VIDMODE_
#cmakedefine NO_IRR_LINUX_X11_RANDR_
#cmakedefine NO_IRR_LINUX_X11_XINPUT2_

//! X11 has by default only monochrome cursors, but using the Xcursor library we can also get color cursor support.
//! If you have the need for custom color cursors on X11 then enable this and make sure you also link
//! to the Xcursor library in your Makefile/Projectfile.
#cmakedefine _IRR_LINUX_XCURSOR_
#cmakedefine NO_IRR_LINUX_XCURSOR_


//! Define _IRR_COMPILE_WITH_GUI_ to compile the engine with the built-in GUI
/** Disable this if you are using an external library to draw the GUI. If you disable this then
you will not be able to use anything provided by the GUI Environment, including loading fonts. */
#cmakedefine NO_IRR_COMPILE_WITH_GUI_

//! Define _IRR_COMPILE_WITH_PARTICLES to compile the engine the withe build-in particle system
/** You can disable this if you don't need particles or use an external particle system. */
#cmakedefine NO_IRR_COMPILE_WITH_PARTICLES_

//! Define _IRR_WCHAR_FILESYSTEM to enable unicode filesystem support for the engine.
/** This enables the engine to read/write from unicode filesystem. If you
disable this feature, the engine behave as before (ansi). This is currently only supported
for Windows based systems. You also have to set #define UNICODE for this to compile.
*/
#cmakedefine _IRR_WCHAR_FILESYSTEM
#cmakedefine NO_IRR_WCHAR_FILESYSTEM

//! Define _IRR_COMPILE_WITH_JPEGLIB_ to enable compiling the engine using libjpeg.
/** This enables the engine to read jpeg images. If you comment this out,
the engine will no longer read .jpeg images. */
#cmakedefine NO_IRR_COMPILE_WITH_LIBJPEG_

//! Define _IRR_USE_NON_SYSTEM_JPEG_LIB_ to let irrlicht use the jpeglib which comes with irrlicht.
/** If this is commented out, Irrlicht will try to compile using the jpeg lib installed in the system.
	This is only used when _IRR_COMPILE_WITH_LIBJPEG_ is defined.
	NOTE: You will also have to modify the Makefile or project files when changing this default.
	*/
#cmakedefine NO_IRR_USE_NON_SYSTEM_JPEG_LIB_

//! Define _IRR_COMPILE_WITH_LIBPNG_ to enable compiling the engine using libpng.
/** This enables the engine to read png images. If you comment this out,
the engine will no longer read .png images. */
#cmakedefine NO_IRR_COMPILE_WITH_LIBPNG_

//! Define _IRR_USE_NON_SYSTEM_LIBPNG_ to let irrlicht use the libpng which comes with irrlicht.
/** If this is commented out, Irrlicht will try to compile using the libpng installed in the system.
	This is only used when _IRR_COMPILE_WITH_LIBPNG_ is defined.
	NOTE: You will also have to modify the Makefile or project files when changing this default.
	*/
#cmakedefine NO_IRR_USE_NON_SYSTEM_LIB_PNG_

//! Define _IRR_D3D_NO_SHADER_DEBUGGING to disable shader debugging in D3D9
/** If _IRR_D3D_NO_SHADER_DEBUGGING is undefined in IrrCompileConfig.h,
it is possible to debug all D3D9 shaders in VisualStudio. All shaders
(which have been generated in memory or read from archives for example) will be emitted
into a temporary file at runtime for this purpose. To debug your shaders, choose
Debug->Direct3D->StartWithDirect3DDebugging in Visual Studio, and for every shader a
file named 'irr_dbg_shader_%%.vsh' or 'irr_dbg_shader_%%.psh' will be created. Drag'n'drop
the file you want to debug into visual studio. That's it. You can now set breakpoints and
watch registers, variables etc. This works with ASM, HLSL, and both with pixel and vertex shaders.
Note that the engine will run in D3D REF for this, which is a lot slower than HAL. */
#cmakedefine NO_IRR_D3D_NO_SHADER_DEBUGGING

//! Define _IRR_D3D_USE_LEGACY_HLSL_COMPILER to enable the old HLSL compiler in recent DX SDKs
/** This enables support for ps_1_x shaders for recent DX SDKs. Otherwise, support
for this shader model is not available anymore in SDKs after Oct2006. You need to
distribute the OCT2006_d3dx9_31_x86.cab or OCT2006_d3dx9_31_x64.cab though, in order
to provide the user with the proper DLL. That's why it's disabled by default. */
#cmakedefine IRR_D3D_USE_LEGACY_HLSL_COMPILER
#cmakedefine NO_IRR_D3D_USE_LEGACY_HLSL_COMPILER

//! Define _IRR_USE_NVIDIA_PERFHUD_ to opt-in to using the nVidia PerHUD tool
/** Enable, by opting-in, to use the nVidia PerfHUD performance analysis driver
tool <http://developer.nvidia.com/object/nvperfhud_home.html>. */
#cmakedefine _IRR_USE_NVIDIA_PERFHUD_

//! Define one of the three setting for Burning's Video Software Rasterizer
/** So if we were marketing guys we could say Irrlicht has 4 Software-Rasterizers.
	In a Nutshell:
		All Burnings Rasterizers use 32 Bit Backbuffer, 32Bit Texture & 32 Bit Z or WBuffer,
		16 Bit/32 Bit can be adjusted on a global flag.

		BURNINGVIDEO_RENDERER_BEAUTIFUL
			32 Bit + Vertexcolor + Lighting + Per Pixel Perspective Correct + SubPixel/SubTexel Correct +
			Bilinear Texturefiltering + WBuffer

		BURNINGVIDEO_RENDERER_FAST
			32 Bit + Per Pixel Perspective Correct + SubPixel/SubTexel Correct + WBuffer +
			Bilinear Dithering TextureFiltering + WBuffer

		BURNINGVIDEO_RENDERER_ULTRA_FAST
			16Bit + SubPixel/SubTexel Correct + ZBuffer
*/

#cmakedefine BURNINGVIDEO_RENDERER_BEAUTIFUL
#cmakedefine BURNINGVIDEO_RENDERER_FAST
#cmakedefine BURNINGVIDEO_RENDERER_ULTRA_FAST
#cmakedefine BURNINGVIDEO_RENDERER_CE

//! Uncomment the following line if you want to ignore the deprecated warnings
#cmakedefine IGNORE_DEPRECATED_WARNING

//! Define _IRR_COMPILE_WITH_SHADOW_VOLUME_SCENENODE_ to support ShadowVolumes
#cmakedefine NO_IRR_COMPILE_WITH_SHADOW_VOLUME_SCENENODE_

//! Define _IRR_COMPILE_WITH_OCTREE_SCENENODE_ to support OctreeSceneNodes
#cmakedefine NO_IRR_COMPILE_WITH_OCTREE_SCENENODE_

//! Define _IRR_COMPILE_WITH_TERRAIN_SCENENODE_ to support TerrainSceneNodes
#cmakedefine NO_IRR_COMPILE_WITH_TERRAIN_SCENENODE_

//! Define _IRR_COMPILE_WITH_BILLBOARD_SCENENODE_ to support BillboardSceneNodes
#cmakedefine NO_IRR_COMPILE_WITH_BILLBOARD_SCENENODE_

//! Define _IRR_COMPILE_WITH_WATER_SURFACE_SCENENODE_ to support WaterSurfaceSceneNodes
#cmakedefine NO_IRR_COMPILE_WITH_WATER_SURFACE_SCENENODE_

//! Define _IRR_COMPILE_WITH_SKYDOME_SCENENODE_ to support SkydomeSceneNodes
#cmakedefine NO_IRR_COMPILE_WITH_SKYDOME_SCENENODE_

//! Define _IRR_COMPILE_WITH_CUBE_SCENENODE_ to support CubeSceneNodes
#cmakedefine NO_IRR_COMPILE_WITH_CUBE_SCENENODE_

//! Define _IRR_COMPILE_WITH_SPHERE_SCENENODE_ to support CubeSceneNodes
#cmakedefine NO_IRR_COMPILE_WITH_SPHERE_SCENENODE_

//! Define _IRR_COMPILE_WITH_IRR_SCENE_LOADER_ if you want to be able to load
/** .irr scenes using ISceneManager::loadScene */
#cmakedefine NO_IRR_COMPILE_WITH_IRR_SCENE_LOADER_

//! Define _IRR_COMPILE_WITH_SKINNED_MESH_SUPPORT_ if you want to use bone based
/** animated meshes. If you compile without this, you will be unable to load
B3D, MS3D or X meshes */
#cmakedefine NO_IRR_COMPILE_WITH_SKINNED_MESH_SUPPORT_

//! Define _IRR_COMPILE_WITH_B3D_LOADER_ if you want to use Blitz3D files
#cmakedefine NO_IRR_COMPILE_WITH_B3D_LOADER_
//! Define _IRR_COMPILE_WITH_MS3D_LOADER_ if you want to Milkshape files
#cmakedefine NO_IRR_COMPILE_WITH_MS3D_LOADER_
//! Define _IRR_COMPILE_WITH_X_LOADER_ if you want to use Microsoft X files
#cmakedefine NO_IRR_COMPILE_WITH_X_LOADER_
//! Define _IRR_COMPILE_WITH_OGRE_LOADER_ if you want to load Ogre 3D files
#cmakedefine NO_IRR_COMPILE_WITH_OGRE_LOADER_

//! Define _IRR_COMPILE_WITH_IRR_MESH_LOADER_ if you want to load Irrlicht Engine .irrmesh files
#cmakedefine NO_IRR_COMPILE_WITH_IRR_MESH_LOADER_
//! Define _IRR_COMPILE_WITH_HALFLIFE_LOADER_ if you want to load Halflife animated files
#cmakedefine NO_IRR_COMPILE_WITH_HALFLIFE_LOADER_
//! Define _IRR_COMPILE_WITH_MD2_LOADER_ if you want to load Quake 2 animated files
#cmakedefine NO_IRR_COMPILE_WITH_MD2_LOADER_
//! Define _IRR_COMPILE_WITH_MD3_LOADER_ if you want to load Quake 3 animated files
#cmakedefine NO_IRR_COMPILE_WITH_MD3_LOADER_
//! Define _IRR_COMPILE_WITH_3DS_LOADER_ if you want to load 3D Studio Max files
#cmakedefine NO_IRR_COMPILE_WITH_3DS_LOADER_
//! Define _IRR_COMPILE_WITH_COLLADA_LOADER_ if you want to load Collada files
#cmakedefine NO_IRR_COMPILE_WITH_COLLADA_LOADER_
//! Define _IRR_COMPILE_WITH_CSM_LOADER_ if you want to load Cartography Shop files
#cmakedefine NO_IRR_COMPILE_WITH_CSM_LOADER_
//! Define _IRR_COMPILE_WITH_BSP_LOADER_ if you want to load Quake 3 BSP files
#cmakedefine NO_IRR_COMPILE_WITH_BSP_LOADER_
//! Define _IRR_COMPILE_WITH_DMF_LOADER_ if you want to load DeleD files
#cmakedefine NO_IRR_COMPILE_WITH_DMF_LOADER_
//! Define _IRR_COMPILE_WITH_LMTS_LOADER_ if you want to load LMTools files
#cmakedefine NO_IRR_COMPILE_WITH_LMTS_LOADER_
//! Define _IRR_COMPILE_WITH_MY3D_LOADER_ if you want to load MY3D files
#cmakedefine NO_IRR_COMPILE_WITH_MY3D_LOADER_
//! Define _IRR_COMPILE_WITH_OBJ_LOADER_ if you want to load Wavefront OBJ files
#cmakedefine NO_IRR_COMPILE_WITH_OBJ_LOADER_
//! Define _IRR_COMPILE_WITH_OCT_LOADER_ if you want to load FSRad OCT files
#cmakedefine NO_IRR_COMPILE_WITH_OCT_LOADER_
//! Define _IRR_COMPILE_WITH_LWO_LOADER_ if you want to load Lightwave3D files
#cmakedefine NO_IRR_COMPILE_WITH_LWO_LOADER_
//! Define _IRR_COMPILE_WITH_STL_LOADER_ if you want to load stereolithography files
#cmakedefine NO_IRR_COMPILE_WITH_STL_LOADER_
//! Define _IRR_COMPILE_WITH_PLY_LOADER_ if you want to load Polygon (Stanford Triangle) files
#cmakedefine NO_IRR_COMPILE_WITH_PLY_LOADER_
//! Define _IRR_COMPILE_WITH_SMF_LOADER_ if you want to load 3D World Studio mesh files
#cmakedefine NO_IRR_COMPILE_WITH_SMF_LOADER_

//! Define _IRR_COMPILE_WITH_IRR_WRITER_ if you want to write static .irrMesh files
#cmakedefine NO_IRR_COMPILE_WITH_IRR_WRITER_
//! Define _IRR_COMPILE_WITH_COLLADA_WRITER_ if you want to write Collada files
#cmakedefine NO_IRR_COMPILE_WITH_COLLADA_WRITER_
//! Define _IRR_COMPILE_WITH_STL_WRITER_ if you want to write .stl files
#cmakedefine NO_IRR_COMPILE_WITH_STL_WRITER_
//! Define _IRR_COMPILE_WITH_OBJ_WRITER_ if you want to write .obj files
#cmakedefine NO_IRR_COMPILE_WITH_OBJ_WRITER_
//! Define _IRR_COMPILE_WITH_PLY_WRITER_ if you want to write .ply files
#cmakedefine NO_IRR_COMPILE_WITH_PLY_WRITER_
//! Define _IRR_COMPILE_WITH_B3D_WRITER_ if you want to write .b3d files
#cmakedefine NO_IRR_COMPILE_WITH_B3D_WRITER_

//! Define _IRR_COMPILE_WITH_BMP_LOADER_ if you want to load .bmp files
//! Disabling this loader will also disable the built-in font
#cmakedefine NO_IRR_COMPILE_WITH_BMP_LOADER_
//! Define _IRR_COMPILE_WITH_JPG_LOADER_ if you want to load .jpg files
#cmakedefine NO_IRR_COMPILE_WITH_JPG_LOADER_
//! Define _IRR_COMPILE_WITH_PCX_LOADER_ if you want to load .pcx files
#cmakedefine NO_IRR_COMPILE_WITH_PCX_LOADER_
//! Define _IRR_COMPILE_WITH_PNG_LOADER_ if you want to load .png files
#cmakedefine NO_IRR_COMPILE_WITH_PNG_LOADER_
//! Define _IRR_COMPILE_WITH_PPM_LOADER_ if you want to load .ppm/.pgm/.pbm files
#cmakedefine NO_IRR_COMPILE_WITH_PPM_LOADER_
//! Define _IRR_COMPILE_WITH_PSD_LOADER_ if you want to load .psd files
#cmakedefine NO_IRR_COMPILE_WITH_PSD_LOADER_
//! Define _IRR_COMPILE_WITH_PVR_LOADER_ if you want to load .pvr files
#cmakedefine NO_IRR_COMPILE_WITH_PVR_LOADER_
//! Define _IRR_COMPILE_WITH_DDS_LOADER_ if you want to load compressed .dds files
// Patent problem isn't related to this loader.
#cmakedefine NO_IRR_COMPILE_WITH_DDS_LOADER_
//! Define _IRR_COMPILE_WITH_DDS_DECODER_LOADER_ if you want to load .dds files
//! loader will decompress these files and will send to the memory as uncompressed files.
// Outcommented because
// a) it doesn't compile on 64-bit currently
// b) anyone enabling it should be aware that S3TC compression algorithm which might be used in that loader
// is patented in the US by S3 and they do collect license fees when it's used in applications.
// So if you are unfortunate enough to develop applications for US market and their broken patent system be careful.
#cmakedefine _IRR_COMPILE_WITH_DDS_DECODER_LOADER_
#cmakedefine NO_IRR_COMPILE_WITH_DDS_DECODER_LOADER_

//! Define _IRR_COMPILE_WITH_TGA_LOADER_ if you want to load .tga files
#cmakedefine NO_IRR_COMPILE_WITH_TGA_LOADER_
//! Define _IRR_COMPILE_WITH_WAL_LOADER_ if you want to load .wal files
#cmakedefine NO_IRR_COMPILE_WITH_WAL_LOADER_
//! Define _IRR_COMPILE_WITH_LMP_LOADER_ if you want to load .lmp files
#cmakedefine NO_IRR_COMPILE_WITH_LMP_LOADER_
//! Define _IRR_COMPILE_WITH_RGB_LOADER_ if you want to load Silicon Graphics .rgb/.rgba/.sgi/.int/.inta/.bw files
#cmakedefine NO_IRR_COMPILE_WITH_RGB_LOADER_

//! Define _IRR_COMPILE_WITH_BMP_WRITER_ if you want to write .bmp files
#cmakedefine NO_IRR_COMPILE_WITH_BMP_WRITER_
//! Define _IRR_COMPILE_WITH_JPG_WRITER_ if you want to write .jpg files
#cmakedefine NO_IRR_COMPILE_WITH_JPG_WRITER_
//! Define _IRR_COMPILE_WITH_PCX_WRITER_ if you want to write .pcx files
#cmakedefine NO_IRR_COMPILE_WITH_PCX_WRITER_
//! Define _IRR_COMPILE_WITH_PNG_WRITER_ if you want to write .png files
#cmakedefine NO_IRR_COMPILE_WITH_PNG_WRITER_
//! Define _IRR_COMPILE_WITH_PPM_WRITER_ if you want to write .ppm files
#cmakedefine NO_IRR_COMPILE_WITH_PPM_WRITER_
//! Define _IRR_COMPILE_WITH_PSD_WRITER_ if you want to write .psd files
#cmakedefine NO_IRR_COMPILE_WITH_PSD_WRITER_
//! Define _IRR_COMPILE_WITH_TGA_WRITER_ if you want to write .tga files
#cmakedefine NO_IRR_COMPILE_WITH_TGA_WRITER_

//! Define __IRR_COMPILE_WITH_ZIP_ARCHIVE_LOADER_ if you want to open ZIP and GZIP archives
/** ZIP reading has several more options below to configure. */
#cmakedefine NO__IRR_COMPILE_WITH_ZIP_ARCHIVE_LOADER_

//! Define _IRR_COMPILE_WITH_ZLIB_ to enable compiling the engine using zlib.
/** This enables the engine to read from compressed .zip archives. If you
disable this feature, the engine can still read archives, but only uncompressed
ones. */
#cmakedefine NO_IRR_COMPILE_WITH_ZLIB_
//! Define _IRR_USE_NON_SYSTEM_ZLIB_ to let irrlicht use the zlib which comes with irrlicht.
/** If this is commented out, Irrlicht will try to compile using the zlib
	installed on the system. This is only used when _IRR_COMPILE_WITH_ZLIB_ is
	defined.
	NOTE: You will also have to modify the Makefile or project files when changing this default.
 */
#cmakedefine NO_IRR_USE_NON_SYSTEM_ZLIB_
//! Define _IRR_COMPILE_WITH_ZIP_ENCRYPTION_ if you want to read AES-encrypted ZIP archives
#cmakedefine NO_IRR_COMPILE_WITH_ZIP_ENCRYPTION_
//! Define _IRR_COMPILE_WITH_BZIP2_ if you want to support bzip2 compressed zip archives
/** bzip2 is superior to the original zip file compression modes, but requires
a certain amount of memory for decompression and adds several files to the
library. */
#cmakedefine NO_IRR_COMPILE_WITH_BZIP2_
//! Define _IRR_USE_NON_SYSTEM_BZLIB_ to let irrlicht use the bzlib which comes with irrlicht.
/** If this is commented out, Irrlicht will try to compile using the bzlib
installed on the system. This is only used when _IRR_COMPILE_WITH_BZLIB_ is
defined.
NOTE: You will also have to modify the Makefile or project files when changing this default.
*/
#cmakedefine NO_IRR_USE_NON_SYSTEM_BZLIB_
//! Define _IRR_COMPILE_WITH_LZMA_ if you want to use LZMA compressed zip files.
/** LZMA is a very efficient compression code, known from 7zip. Irrlicht
currently only supports zip archives, though. */
#cmakedefine NO_IRR_COMPILE_WITH_LZMA_

//! Define __IRR_COMPILE_WITH_MOUNT_ARCHIVE_LOADER_ if you want to mount folders as archives
#cmakedefine NO__IRR_COMPILE_WITH_MOUNT_ARCHIVE_LOADER_
//! Define __IRR_COMPILE_WITH_PAK_ARCHIVE_LOADER_ if you want to open ID software PAK archives
#cmakedefine NO__IRR_COMPILE_WITH_PAK_ARCHIVE_LOADER_
//! Define __IRR_COMPILE_WITH_NPK_ARCHIVE_LOADER_ if you want to open Nebula Device NPK archives
#cmakedefine NO__IRR_COMPILE_WITH_NPK_ARCHIVE_LOADER_
//! Define __IRR_COMPILE_WITH_TAR_ARCHIVE_LOADER_ if you want to open TAR archives
#cmakedefine NO__IRR_COMPILE_WITH_TAR_ARCHIVE_LOADER_
//! Define __IRR_COMPILE_WITH_WAD_ARCHIVE_LOADER_ if you want to open WAD archives
#cmakedefine NO__IRR_COMPILE_WITH_WAD_ARCHIVE_LOADER_

//! Set FPU settings
/** Irrlicht should use approximate float and integer fpu techniques
precision will be lower but speed higher. currently X86 only
*/
#cmakedefine IRRLICHT_FAST_MATH
#cmakedefine NO_IRRLICHT_FAST_MATH

//! To build Irrlicht as a static library, you must define _IRR_STATIC_LIB_ in both the
//! Irrlicht build, *and* in the user application, before #including <irrlicht.h>
#cmakedefine _IRR_STATIC_LIB_

//! Define __IRR_HAS_PRAGMA_LIB if you want to disable pragma lib calls.
#cmakedefine NO__IRR_HAS_PRAGMA_LIB

//! Define __IRR_HAS_S64 if the irr::s64 type should be enable (needs long long, available on most platforms, but not part of ISO C++ 98)
#cmakedefine NO__IRR_HAS_S64

	//! A few attributes are written in CSceneManager when _IRR_SCENEMANAGER_DEBUG is enabled
	// NOTE: Those attributes were used always until 1.8.0 and became a global define for 1.8.1
	// which is only enabled in debug because it had a large (sometimes >5%) impact on speed.
	// A better solution in the long run is to break the interface and remove _all_ attribute
	// access in functions like CSceneManager::drawAll and instead put that information in some
	// own struct/class or in CSceneManager.
	// See http://irrlicht.sourceforge.net/forum/viewtopic.php?f=2&t=48211 for the discussion.
    #cmakedefine _IRR_SCENEMANAGER_DEBUG
	#cmakedefine NO_IRR_SCENEMANAGER_DEBUG
