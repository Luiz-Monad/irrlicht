# ===================================================================================
#  The Irrlicht CMake configuration file
#
#             ** File generated automatically, do not modify **
#
#  Usage from an external project:
#    In your CMakeLists.txt, add these lines:
#
#    FIND_PACKAGE(Irrlicht REQUIRED)
#    TARGET_LINK_LIBRARIES(MY_TARGET_NAME ${Irrlicht_LIBS})
#
#    Or you can search for specific Irrlicht modules:
#
#    FIND_PACKAGE(Irrlicht REQUIRED core imgcodecs)
#
#    If the module is found then IRRLICHT_<MODULE>_FOUND is set to TRUE.
#
#    This file will define the following variables:
#      - Irrlicht_LIBS                     : The list of libraries to link against.
#      - Irrlicht_INCLUDE_DIRS             : The Irrlicht include directories.
#      - Irrlicht_COMPUTE_CAPABILITIES     : The version of compute capability
#      - Irrlicht_VERSION                  : The version of this Irrlicht build: "@OPENCV_VERSION_PLAIN@"
#      - Irrlicht_VERSION_MAJOR            : Major version part of Irrlicht_VERSION: "@OPENCV_VERSION_MAJOR@"
#      - Irrlicht_VERSION_MINOR            : Minor version part of Irrlicht_VERSION: "@OPENCV_VERSION_MINOR@"
#      - Irrlicht_VERSION_PATCH            : Patch version part of Irrlicht_VERSION: "@OPENCV_VERSION_PATCH@"
#      - Irrlicht_VERSION_STATUS           : Development status of this build: "@OPENCV_VERSION_STATUS@"
#
#    Advanced variables:
#      - Irrlicht_SHARED
#
# ===================================================================================
#
#    Windows pack specific options:
#      - Irrlicht_STATIC

if(CMAKE_VERSION VERSION_GREATER 2.6)
  get_property(Irrlicht_LANGUAGES GLOBAL PROPERTY ENABLED_LANGUAGES)
  if(NOT ";${Irrlicht_LANGUAGES};" MATCHES ";CXX;")
    enable_language(CXX)
  endif()
endif()

if(NOT DEFINED Irrlicht_STATIC)
  # look for global setting
  if(NOT DEFINED BUILD_SHARED_LIBS OR BUILD_SHARED_LIBS)
    set(Irrlicht_STATIC OFF)
  else()
    set(Irrlicht_STATIC ON)
  endif()
endif()

function(check_one_config RES)
  set(${RES} "" PARENT_SCOPE)
  if(NOT Irrlicht_RUNTIME OR NOT Irrlicht_ARCH)
    return()
  endif()
  set(candidates)
  if(Irrlicht_STATIC)
    list(APPEND candidates "${Irrlicht_ARCH}/${Irrlicht_RUNTIME}/staticlib")
  endif()
  list(APPEND candidates "${Irrlicht_ARCH}/${Irrlicht_RUNTIME}/lib")
  foreach(c ${candidates})
    set(p "${Irrlicht_CONFIG_PATH}/${c}")
    if(EXISTS "${p}/IrrlichtConfig.cmake")
      set(${RES} "${p}" PARENT_SCOPE)
      return()
    endif()
  endforeach()
endfunction()

get_filename_component(Irrlicht_CONFIG_PATH "${CMAKE_CURRENT_LIST_FILE}" DIRECTORY)

if((NOT DEFINED CMAKE_SYSTEM_PROCESSOR OR CMAKE_SYSTEM_PROCESSOR STREQUAL "")
    AND NOT IRR_SUPPRESS_MESSAGE_MISSING_CMAKE_SYSTEM_PROCESSOR)
  message(WARNING "Irrlicht: CMAKE_SYSTEM_PROCESSOR is not defined. Perhaps CMake toolchain is broken")
endif()
if(NOT DEFINED CMAKE_SIZEOF_VOID_P
    AND NOT IRR_SUPPRESS_MESSAGE_MISSING_CMAKE_SIZEOF_VOID_P)
  message(WARNING "Irrlicht: CMAKE_SIZEOF_VOID_P is not defined. Perhaps CMake toolchain is broken")
endif()

if(DEFINED Irrlicht_ARCH AND DEFINED Irrlicht_RUNTIME)
  # custom overridden values
elseif(MSVC)
  # see Modules/CMakeGenericSystem.cmake
  if("${CMAKE_GENERATOR}" MATCHES "(Win64|IA64)")
    set(Irrlicht_ARCH "x64")
  elseif("${CMAKE_GENERATOR_PLATFORM}" MATCHES "ARM64")
    set(Irrlicht_ARCH "ARM64")
  elseif("${CMAKE_GENERATOR}" MATCHES "ARM")
    set(Irrlicht_ARCH "ARM")
  elseif("${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
    set(Irrlicht_ARCH "x64")
  else()
    set(Irrlicht_ARCH x86)
  endif()

  if(MSVC_VERSION EQUAL 1400)
    set(Irrlicht_RUNTIME vc8)
  elseif(MSVC_VERSION EQUAL 1500)
    set(Irrlicht_RUNTIME vc9)
  elseif(MSVC_VERSION EQUAL 1600)
    set(Irrlicht_RUNTIME vc10)
  elseif(MSVC_VERSION EQUAL 1700)
    set(Irrlicht_RUNTIME vc11)
  elseif(MSVC_VERSION EQUAL 1800)
    set(Irrlicht_RUNTIME vc12)
  elseif(MSVC_VERSION EQUAL 1900)
    set(Irrlicht_RUNTIME vc14)
  elseif(MSVC_VERSION MATCHES "^191[0-9]$")
    set(Irrlicht_RUNTIME vc15)
    check_one_config(has_VS2017)
    if(NOT has_VS2017)
      set(Irrlicht_RUNTIME vc14) # selecting previous compatible runtime version
    endif()
  elseif(MSVC_VERSION MATCHES "^192[0-9]$")
    set(Irrlicht_RUNTIME vc16)
    check_one_config(has_VS2019)
    if(NOT has_VS2019)
      set(Irrlicht_RUNTIME vc15) # selecting previous compatible runtime version
      check_one_config(has_VS2017)
      if(NOT has_VS2017)
        set(Irrlicht_RUNTIME vc14) # selecting previous compatible runtime version
      endif()
    endif()
  endif()
elseif(MINGW)
  set(Irrlicht_RUNTIME mingw)

  if(CMAKE_SYSTEM_PROCESSOR MATCHES "amd64.*|x86_64.*|AMD64.*")
    set(Irrlicht_ARCH x64)
  else()
    set(Irrlicht_ARCH x86)
  endif()
endif()

check_one_config(Irrlicht_LIB_PATH)

if(NOT Irrlicht_FIND_QUIETLY)
  message(STATUS "Irrlicht ARCH: ${Irrlicht_ARCH}")
  message(STATUS "Irrlicht RUNTIME: ${Irrlicht_RUNTIME}")
  message(STATUS "Irrlicht STATIC: ${Irrlicht_STATIC}")
endif()

if(Irrlicht_LIB_PATH AND EXISTS "${Irrlicht_LIB_PATH}/IrrlichtConfig.cmake")
  include("${Irrlicht_LIB_PATH}/IrrlichtConfig.cmake")

  if(NOT Irrlicht_FIND_QUIETLY)
    message(STATUS "Found Irrlicht ${Irrlicht_VERSION} in ${Irrlicht_LIB_PATH}")
    if(NOT Irrlicht_LIB_PATH MATCHES "/staticlib")
      get_filename_component(_Irrlicht_LIB_PATH "${Irrlicht_LIB_PATH}/../bin" ABSOLUTE)
      file(TO_NATIVE_PATH "${_Irrlicht_LIB_PATH}" _Irrlicht_LIB_PATH)
      message(STATUS "You might need to add ${_Irrlicht_LIB_PATH} to your PATH to be able to run your applications.")
      if(Irrlicht_LIB_PATH MATCHES "/gpu/")
        string(REPLACE "\\gpu" "" _Irrlicht_LIB_PATH2 "${_Irrlicht_LIB_PATH}")
        message(STATUS "GPU support is enabled so you might also need ${_Irrlicht_LIB_PATH2} in your PATH (it must go after the ${_Irrlicht_LIB_PATH}).")
      endif()
    endif()
  endif()
else()
  if(NOT Irrlicht_FIND_QUIETLY)
    message(WARNING
"Found Irrlicht Windows Pack but it has no binaries compatible with your configuration.
You should manually point CMake variable Irrlicht_DIR to your build of Irrlicht library."
    )
  endif()
  set(Irrlicht_FOUND FALSE)
endif()
